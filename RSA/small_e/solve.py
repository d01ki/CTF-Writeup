from Crypto.Util.number import long_to_bytes
import gmpy2

c = 53307717185945632319351374015300469554382179582086491611389169357125954465312356785128561928472916501126300871214119774896652148147706314116488502295077989149092966501357909776225091518942549051634943577111139950003269349470731079127788078104797580254455400193616106658993971704377611189507947103649247229584
N = 99001259827503833213134577733825021083594092070272653059661967928815977565185935322378922028178494862289372100856435200787207536366445399722133897433684496732960789310518848859502885933475471842001744544995888275871747404666508451688056124064493381659642475078198315894882290460124015791475489317063448792013
e = 3

def decrypt_iroot_e(c, n, e):
    for k in range(-1000, 1000):
        c_kn = c - k * n
        if c_kn < 0:
            continue
        m, exact = gmpy2.iroot(c_kn, e)
        if exact:
            return m
    
m = decrypt_iroot_e(c, N, e)
if m:
    m_str = long_to_bytes(int(m))
    print(m_str)
else:
    print("復号に失敗しました。")
